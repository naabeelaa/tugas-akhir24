# -*- coding: utf-8 -*-
"""EDA 02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BWcnja0L1QySmS73mcCk3pOVbAPP1aV9
"""

import pandas as pd

df = pd.read_excel('prabowo gibran final.xlsx')
df.head()

from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Filter data untuk sentimen positif dan negatif
positive_tweets = df[df['Fix Label'] == 'positive']['full_text']
negative_tweets = df[df['Fix Label'] == 'negative']['full_text']

# Gabungkan teks untuk masing-masing sentimen
positive_text = ' '.join(positive_tweets)
negative_text = ' '.join(negative_tweets)

# Buat word cloud untuk sentimen positif
positive_wc = WordCloud(
    width=800,
    height=400,
    background_color='white',
    max_font_size=150,
    min_font_size=10,
    collocations=False,  # Hindari kata yang berulang-ulang menjadi satu entitas
    relative_scaling=0.0,  # Membuat kata-kata lebih rapat
    contour_width=1,      # Menambahkan garis kontur pada kata
    contour_color='black' # Warna kontur
).generate(positive_text)

# Buat word cloud untuk sentimen negatif
negative_wc = WordCloud(
    width=800,
    height=400,
    background_color='white',
    max_font_size=150,
    min_font_size=10,
    collocations=False,
    relative_scaling=0.0,
    contour_width=1,
    contour_color='black'
).generate(negative_text)

# Tampilkan word clouds
plt.figure(figsize=(10, 8))

plt.subplot(1, 2, 1)
plt.imshow(positive_wc, interpolation='bilinear')
plt.title("Positive Sentiment")
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(negative_wc, interpolation='bilinear')
plt.title("Negative Sentiment")
plt.axis('off')

plt.show()

import matplotlib.pyplot as plt

# Hitung distribusi sentimen
sentiment_counts = df['Fix Label'].value_counts()

# Tentukan label dan data
labels = ['Positive', 'Negative']
sizes = sentiment_counts.values
colors = ['#66b3ff', '#ff6666']

# Fungsi untuk menampilkan label + persentase di dalam pie chart
def autopct_with_label(pct, all_values):
    total = sum(all_values)
    absolute = int(round(pct / 100. * total))  # Hitung nilai absolut
    if absolute in all_values:  # Pastikan nilai ditemukan
        index = all_values.tolist().index(absolute)
        return f"{labels[index]}\n{pct:.1f}%"  # Gabungkan label dan persentase
    return ""

# Buat pie chart
plt.figure(figsize=(7, 7))
plt.pie(
    sizes,
    colors=colors,
    startangle=90,
    autopct=lambda pct: autopct_with_label(pct, sizes),
    textprops={'fontsize': 12, 'color': 'black'}  # Mengatur teks dalam potongan pie chart
)

plt.title('Distribution of Sentiments')
plt.axis('equal')  # Agar chart berbentuk bulat
plt.show()

import matplotlib.pyplot as plt

# Hitung panjang tweet
df['tweet_length'] = df['full_text'].apply(len)

# Plot histogram dengan ukuran lebih kecil dan lebar
plt.figure(figsize=(14, 4))  # Lebar 14, tinggi 4
plt.hist(df['tweet_length'], bins=30, color='#66b3ff', edgecolor='black')
plt.title('Tweet Lengths')
plt.xlabel('Tweet Length (characters)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()